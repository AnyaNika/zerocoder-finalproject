from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from services import (
    get_today_transactions, get_week_transactions, get_categories,
    get_category_transactions, register_user, add_transaction, calculate_week_expenses
)

router = Router()


# ---------- FSM ----------
class AddExpense(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()


# ---------- START ----------
@router.message(Command("start"))
async def start_handler(message: Message):
    tg_id = message.from_user.id
    tg_username = message.from_user.username
    display_name = message.from_user.first_name or message.from_user.username

    data = await register_user(tg_id, tg_username)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")]
        ]
    )

    if data.get("created"):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {display_name}! –Ø —Å–æ–∑–¥–∞–ª —Ç–µ–±–µ –∞–∫–∫–∞—É–Ω—Ç ‚úÖ", reply_markup=kb
        )
    else:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {display_name}! üëã", reply_markup=kb
        )


# ---------- TODAY ----------
@router.message(Command("today"))
async def today_handler(message: Message):
    tg_id = message.from_user.id
    transactions = await get_today_transactions(tg_id)

    if transactions:
        text = "\n".join([f"{t['amount']} —Ä—É–± ‚Äî {t['category']}" for t in transactions])
    else:
        text = "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
    await message.answer(text)


# ---------- WEEK ----------
@router.message(Command("week"))
async def week_handler(message: Message):
    tg_id = message.from_user.id
    transactions = await get_week_transactions(tg_id)
    total_expenses = calculate_week_expenses(transactions)
    print("–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:", total_expenses)

    if transactions:
        total = sum(float(t["amount"]) for t in transactions)
        text = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {total} —Ä—É–±."
    else:
        text = "–ó–∞ –Ω–µ–¥–µ–ª—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç."
    await message.answer(text)


# ---------- CATEGORY ----------
@router.message(Command("category"))
async def category_handler(message: Message):
    tg_id = message.from_user.id
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: /category food")
        return

    category = parts[1]
    transactions = await get_category_transactions(tg_id, category)

    if transactions:
        total = sum(float(t["amount"]) for t in transactions)
        text = f"–í—Å–µ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {total} —Ä—É–±."
    else:
        text = f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'."
    await message.answer(text)


# ---------- FSM: –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–°–•–û–î–ê ----------
@router.callback_query(F.data == "add_expense")
async def add_expense_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddExpense.waiting_for_amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await callback.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"


@router.message(AddExpense.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 200")
        return

    await state.update_data(amount=amount)

    # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = message.from_user.id
    categories = await get_categories(tg_id)

    if not categories:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é!")
        await state.clear()
        return

     # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat["name"], callback_data=f"category:{cat['name']}")]
            for cat in categories
        ]
    )

    await state.set_state(AddExpense.waiting_for_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


@router.callback_query(AddExpense.waiting_for_category, F.data.startswith("category:"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = data["amount"]

    category = callback.data.split(":", 1)[1]
    tg_id = callback.from_user.id

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥
    await add_transaction(tg_id, amount, category)

    await state.clear()
    await callback.message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {amount} —Ä—É–±, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    await callback.answer()