from aiogram import Router, types
from aiogram.filters import Command
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async

router = Router()
User = get_user_model()


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
@sync_to_async
def get_or_create_user(telegram_id: int):
    user, created = User.objects.get_or_create(telegram_id=telegram_id)
    return user, created


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    telegram_id = message.from_user.id

    user, created = await get_or_create_user(telegram_id)

    if created:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã –Ø —Ç–µ–±—è —É–∂–µ –∑–Ω–∞—é.")

# @router.message(Command("start"))
# async def send_welcome(message: types.Message):
#     user_id = message.from_user.id
#     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –≤ User
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π Telegram ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏.")

# @router.message(Command("start"))
# async def send_welcome(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π /today, /week, /add")

@router.message(Command("today"))
async def today_stats(message: types.Message):
    await message.answer("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ... (–ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –ë–î)")

@router.message(Command("week"))
async def week_stats(message: types.Message):
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: ...")

@router.message(Command("add"))
async def add_transaction(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –Ω–∞–ø–∏—à–∏: /add 500 –µ–¥–∞")



